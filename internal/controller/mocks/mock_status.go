// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eiizu/go-service/internal/controller (interfaces: StatusUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatusUseCase is a mock of StatusUseCase interface.
type MockStatusUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUseCaseMockRecorder
}

// MockStatusUseCaseMockRecorder is the mock recorder for MockStatusUseCase.
type MockStatusUseCaseMockRecorder struct {
	mock *MockStatusUseCase
}

// NewMockStatusUseCase creates a new mock instance.
func NewMockStatusUseCase(ctrl *gomock.Controller) *MockStatusUseCase {
	mock := &MockStatusUseCase{ctrl: ctrl}
	mock.recorder = &MockStatusUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUseCase) EXPECT() *MockStatusUseCaseMockRecorder {
	return m.recorder
}

// Healthz mocks base method.
func (m *MockStatusUseCase) Healthz() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthz")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthz indicates an expected call of Healthz.
func (mr *MockStatusUseCaseMockRecorder) Healthz() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthz", reflect.TypeOf((*MockStatusUseCase)(nil).Healthz))
}

// Statusz mocks base method.
func (m *MockStatusUseCase) Statusz() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statusz")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statusz indicates an expected call of Statusz.
func (mr *MockStatusUseCaseMockRecorder) Statusz() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statusz", reflect.TypeOf((*MockStatusUseCase)(nil).Statusz))
}
